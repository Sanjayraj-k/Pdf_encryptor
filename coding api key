import React, { useState, useRef, useEffect } from 'react';
import { ChevronLeft, ChevronRight, Play, Settings, CheckCircle, XCircle } from 'lucide-react';

const CodeCompiler = () => {
  const editorRef = useRef(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [language, setLanguage] = useState('javascript');
  const [theme, setTheme] = useState('vs-dark');
  const [fontSize, setFontSize] = useState(14);
  const [output, setOutput] = useState('');
  const [testResults, setTestResults] = useState([]);
  const [isRunning, setIsRunning] = useState(false);

  const questions = [
    {
      title: "Add Two Numbers",
      description: "Write a function that adds two numbers and returns the result.",
      examples: [
        { input: "2, 3", output: "5" },
        { input: "-1, 5", output: "4" }
      ],
      constraints: [
        "The numbers will be integers.",
        "The sum will not exceed the range of a 32-bit integer."
      ],
      testCases: [
        { input: [2, 3], expected: 5 },
        { input: [-1, 5], expected: 4 },
        { input: [0, 0], expected: 0 },
        { input: [100, 200], expected: 300 }
      ],
      starterCode: {
        javascript: `function addTwoNumbers(a, b) {
    // Write your code here
    
}`,
        python: `def add_two_numbers(a, b):
    # Write your code here
    pass`,
        cpp: `#include <iostream>
using namespace std;

int addTwoNumbers(int a, int b) {
    // Write your code here
    
}`,
        java: `public class Solution {
    public int addTwoNumbers(int a, int b) {
        // Write your code here
        
    }
}`
      }
    },
    {
      title: "Find Maximum",
      description: "Write a function that finds the maximum number in an array.",
      examples: [
        { input: "[1, 3, 2]", output: "3" },
        { input: "[-1, -5, -2]", output: "-1" }
      ],
      constraints: [
        "Array will have at least one element.",
        "All elements are integers."
      ],
      testCases: [
        { input: [[1, 3, 2]], expected: 3 },
        { input: [[-1, -5, -2]], expected: -1 },
        { input: [[5]], expected: 5 },
        { input: [[10, 20, 30, 5]], expected: 30 }
      ],
      starterCode: {
        javascript: `function findMaximum(arr) {
    // Write your code here
    
}`,
        python: `def find_maximum(arr):
    # Write your code here
    pass`,
        cpp: `#include <vector>
using namespace std;

int findMaximum(vector<int>& arr) {
    // Write your code here
    
}`,
        java: `public class Solution {
    public int findMaximum(int[] arr) {
        // Write your code here
        
    }
}`
      }
    },
    {
      title: "Reverse String",
      description: "Write a function that reverses a string.",
      examples: [
        { input: '"hello"', output: '"olleh"' },
        { input: '"world"', output: '"dlrow"' }
      ],
      constraints: [
        "String can contain any ASCII characters.",
        "Empty string should return empty string."
      ],
      testCases: [
        { input: ["hello"], expected: "olleh" },
        { input: ["world"], expected: "dlrow" },
        { input: [""], expected: "" },
        { input: ["a"], expected: "a" }
      ],
      starterCode: {
        javascript: `function reverseString(str) {
    // Write your code here
    
}`,
        python: `def reverse_string(str):
    # Write your code here
    pass`,
        cpp: `#include <string>
using namespace std;

string reverseString(string str) {
    // Write your code here
    
}`,
        java: `public class Solution {
    public String reverseString(String str) {
        // Write your code here
        
    }
}`
      }
    }
  ];

  const [code, setCode] = useState(questions[0].starterCode[language]);

  useEffect(() => {
    setCode(questions[currentQuestion].starterCode[language]);
  }, [currentQuestion, language]);

  useEffect(() => {
    // Initialize Monaco Editor
    const script = document.createElement('script');
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs/loader.min.js';
    script.onload = () => {
      window.require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs' } });
      window.require(['vs/editor/editor.main'], () => {
        if (editorRef.current) {
          const editor = window.monaco.editor.create(editorRef.current, {
            value: code,
            language: language,
            theme: theme,
            fontSize: fontSize,
            minimap: { enabled: false },
            scrollBeyondLastLine: false,
            automaticLayout: true,
          });

          editor.onDidChangeModelContent(() => {
            setCode(editor.getValue());
          });

          // Store editor instance for updates
          editorRef.current.editor = editor;
        }
      });
    };
    document.head.appendChild(script);

    return () => {
      if (editorRef.current?.editor) {
        editorRef.current.editor.dispose();
      }
    };
  }, []);

  useEffect(() => {
    if (editorRef.current?.editor) {
      editorRef.current.editor.setValue(code);
      window.monaco.editor.setModelLanguage(editorRef.current.editor.getModel(), language);
      window.monaco.editor.setTheme(theme);
      editorRef.current.editor.updateOptions({ fontSize: fontSize });
    }
  }, [code, language, theme, fontSize]);

  const runCode = () => {
    setIsRunning(true);
    setOutput('Running tests...');
    
    setTimeout(() => {
      try {
        const currentQ = questions[currentQuestion];
        const results = [];
        
        if (language === 'javascript') {
          // Create a function wrapper and test it
          const funcCode = code + '\n\n';
          
          currentQ.testCases.forEach((testCase, index) => {
            try {
              const result = eval(`(${funcCode}); ${getFunctionName(currentQ.title)}(${testCase.input.map(i => JSON.stringify(i)).join(', ')})`);
              const passed = result === testCase.expected;
              results.push({
                input: testCase.input,
                expected: testCase.expected,
                actual: result,
                passed: passed
              });
            } catch (error) {
              results.push({
                input: testCase.input,
                expected: testCase.expected,
                actual: `Error: ${error.message}`,
                passed: false
              });
            }
          });
        } else {
          // For other languages, simulate test results
          currentQ.testCases.forEach((testCase, index) => {
            const passed = Math.random() > 0.3; // Simulate some passing tests
            results.push({
              input: testCase.input,
              expected: testCase.expected,
              actual: passed ? testCase.expected : 'Compilation Error',
              passed: passed
            });
          });
        }
        
        setTestResults(results);
        const passedTests = results.filter(r => r.passed).length;
        setOutput(`${passedTests}/${results.length} test cases passed`);
      } catch (error) {
        setOutput(`Error: ${error.message}`);
        setTestResults([]);
      }
      setIsRunning(false);
    }, 1000);
  };

  const getFunctionName = (title) => {
    const names = {
      "Add Two Numbers": "addTwoNumbers",
      "Find Maximum": "findMaximum",
      "Reverse String": "reverseString"
    };
    return names[title] || "solution";
  };

  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setTestResults([]);
      setOutput('');
    }
  };

  const previousQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setTestResults([]);
      setOutput('');
    }
  };

  const currentQ = questions[currentQuestion];

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      {/* Left Panel - Question Details */}
      <div className="w-1/3 bg-gray-800 p-6 overflow-y-auto">
        <div className="mb-6">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-2xl font-bold">{currentQ.title}</h1>
            <div className="flex gap-2">
              <button
                onClick={previousQuestion}
                disabled={currentQuestion === 0}
                className="p-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded-lg"
              >
                <ChevronLeft size={20} />
              </button>
              <button
                onClick={nextQuestion}
                disabled={currentQuestion === questions.length - 1}
                className="p-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded-lg"
              >
                <ChevronRight size={20} />
              </button>
            </div>
          </div>
          <p className="text-gray-300 mb-4">{currentQ.description}</p>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2 flex items-center">
            <span className="mr-2">ðŸ”¥</span> Examples
          </h3>
          <div className="bg-gray-700 rounded-lg p-4">
            {currentQ.examples.map((example, index) => (
              <div key={index} className="mb-2">
                <div className="text-sm">
                  <strong>Example {index + 1}:</strong> Input: {example.input} | Output: {example.output}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2 flex items-center">
            <span className="mr-2">âš¡</span> Constraints
          </h3>
          <div className="bg-yellow-900 bg-opacity-30 rounded-lg p-4">
            {currentQ.constraints.map((constraint, index) => (
              <div key={index} className="text-sm text-yellow-300 mb-1">
                â€¢ {constraint}
              </div>
            ))}
          </div>
        </div>

        {/* Test Results */}
        {testResults.length > 0 && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-2">Test Results</h3>
            <div className="space-y-2">
              {testResults.map((result, index) => (
                <div key={index} className={`p-3 rounded-lg ${result.passed ? 'bg-green-900 bg-opacity-30' : 'bg-red-900 bg-opacity-30'}`}>
                  <div className="flex items-center gap-2 mb-1">
                    {result.passed ? <CheckCircle size={16} className="text-green-400" /> : <XCircle size={16} className="text-red-400" />}
                    <span className="text-sm font-medium">Test Case {index + 1}</span>
                  </div>
                  <div className="text-xs text-gray-300">
                    <div>Input: {JSON.stringify(result.input)}</div>
                    <div>Expected: {JSON.stringify(result.expected)}</div>
                    <div>Got: {JSON.stringify(result.actual)}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Right Panel - Code Editor */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-gray-800 p-4 flex items-center justify-between border-b border-gray-700">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-red-500 rounded-full"></div>
              <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
            </div>
            <span className="text-sm text-gray-400">Solution.{language === 'cpp' ? 'cpp' : language}</span>
          </div>
          
          <div className="flex items-center gap-4">
            <select
              value={language}
              onChange={(e) => setLanguage(e.target.value)}
              className="bg-gray-700 text-white px-3 py-1 rounded-lg text-sm"
            >
              <option value="javascript">JavaScript</option>
              <option value="python">Python</option>
              <option value="cpp">C++</option>
              <option value="java">Java</option>
            </select>
            
            <select
              value={theme}
              onChange={(e) => setTheme(e.target.value)}
              className="bg-gray-700 text-white px-3 py-1 rounded-lg text-sm"
            >
              <option value="vs-dark">Dark</option>
              <option value="vs-light">Light</option>
            </select>
            
            <input
              type="range"
              min="12"
              max="24"
              value={fontSize}
              onChange={(e) => setFontSize(parseInt(e.target.value))}
              className="w-16"
            />
            <span className="text-sm text-gray-400">{fontSize}px</span>
            
            <button
              onClick={runCode}
              disabled={isRunning}
              className="flex items-center gap-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 px-4 py-2 rounded-lg text-sm font-medium"
            >
              <Play size={16} />
              {isRunning ? 'Running...' : 'Run'}
            </button>
          </div>
        </div>

        {/* Editor */}
        <div className="flex-1 relative">
          <div ref={editorRef} className="w-full h-full" />
        </div>

        {/* Output */}
        <div className="bg-gray-800 p-4 border-t border-gray-700">
          <div className="flex items-center gap-2 mb-2">
            <span className="text-sm font-medium">Output:</span>
          </div>
          <div className="bg-gray-900 rounded-lg p-3 text-sm font-mono">
            {output || 'Click "Run" to execute your code'}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodeCompiler;
